{"version":3,"sources":["cool.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAiBA,KACE,qCAHoC,CAMtC,eACE,wBAA8C,CAC9C,uCARoC,CAMtC,4CAOM,kCAA6B,CAC7B,0CAdgC,CAMtC,iIAcQ,iBAAkB,CAd1B,+IAgBoB,SAAU,CAM9B,iCACE,iBAAkB,CADpB,wCAEc,SAAU,CCepB,yBDZJ,iBAII,kCAA6B,CAC7B,0CAtCkC,CAmClC,gBAnCkC,CA8CrC,CAbD,wBAQc,SAAU,CCIpB,yBDZJ,iBAWI,YAAa,CAEhB,CAED,MACE,wBAAyB,CACzB,uCAlDoC,CAqDtC,yEAKM,iBAAuC,CAE7C,QACE,4BAA6B,CAC7B,uCA9DoC","file":"skin.cool.css","sourcesContent":["\n// template and bootstrap override variables\n@import \"../variables\";\n@import \"../bootstrap/variables\";\n\n// template and bootstrap mixins\n@import \"../mixins\";\n@import \"../bootstrap/mixins\";\n\n// bootstrap\n@import \"../../node_modules/bootstrap/scss/functions\";\n@import \"../../node_modules/bootstrap/scss/variables\";\n@import \"../../node_modules/bootstrap/scss/mixins\";\n\n// local vars\n$skin-ui-01:    desaturate($blue, 20%);\n\nbody {\n  background-color: rgba($skin-ui-01, .03);\n}\n\n.navbar-header {\n  border-bottom-color: lighten($skin-ui-01, 45%);\n  box-shadow: 0 0 25px rgba($skin-ui-01, .1);\n\n  .navbar-right {\n    .dropdown-menu {\n      border-color: lighten($skin-ui-01, 45%);\n      border-top-color: transparent;\n      box-shadow: 0 15px 15px rgba($skin-ui-01, .1);\n    }\n\n    .dropdown-notification,\n    .dropdown-message {\n      .dropdown-menu {\n        margin-top: 18.5px;\n\n        &::before { opacity: 0; }\n      }\n    }\n  }\n}\n\n.dropdown-profile .dropdown-menu {\n  margin-top: 13.5px;\n  &::before { opacity: 0; }\n}\n\n.navbar-menu-sub {\n  @include media-breakpoint-up(lg) {\n    padding-top: 10px;\n    border-color: lighten($skin-ui-01, 45%);\n    border-top-color: transparent;\n    box-shadow: 0 15px 15px rgba($skin-ui-01, .1);\n  }\n\n  &::before { opacity: 0; }\n\n  @include media-breakpoint-up(lg) {\n    margin-top: 0;\n  }\n}\n\n.card {\n  border-color: transparent;\n  box-shadow: 0 0 25px rgba($skin-ui-01, .1);\n}\n\n.card-header,\n.card-footer,\n.list-group-item,\n.table tr th,\n.table tr td,\n.bd { border-color: lighten($skin-ui-01, 46%); }\n\n.footer {\n  border-top-color: transparent;\n  box-shadow: 0 0 25px rgba($skin-ui-01, .1);\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}