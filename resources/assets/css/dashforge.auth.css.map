{"version":3,"sources":["auth.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAqBA,aAEI,6DAAwE,CACxE,mBAAoB,CAFpB,YAEoB,CAGxB,cACI,YAAa,CACb,aAAc,CAGlB,qEACE,aAEE,mBAAoB,CADpB,WACoB,CAGtB,cACE,WAAY,CAEZ,aAAc,CACd,WAAY,CAFZ,iBAEY,CACb,CAGH,cAEE,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAHvB,8BAGuB,CAJzB,yBAOI,SAAU,CAEV,0BATJ,yBAUM,cAAe,CACf,cAAe,CAIlB,CAfH,qCAcoB,MAAO,CAI3B,kBAEE,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAHvB,8BAGuB,CAJzB,6BAOG,SAAU,CAEV,0BATH,6BAUK,cAAe,CAElB,CAGF,cAIE,kBAAmB,CAHnB,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAEvB,WAAY,CCxBV,0BDmBJ,cAQI,WAAY,CASf,CAjBD,gCAaM,aAAc,CACd,iBAAkB","file":"dashforge.auth.css","sourcesContent":["\r\n/*\r\n * Dashforge Auth Pages (Signin, Signup, etc.)\r\n *\r\n * This style is use in auth pages.\r\n *\r\n */\r\n\r\n// Variables\r\n@import \"../variables\";\r\n@import \"../bootstrap/variables\";\r\n\r\n// Mixins\r\n@import \"../mixins\";\r\n@import \"../bootstrap/mixins\";\r\n\r\n// Bootsrap\r\n@import \"../../node_modules/bootstrap/scss/functions\";\r\n@import \"../../node_modules/bootstrap/scss/variables\";\r\n@import \"../../node_modules/bootstrap/scss/mixins\";\r\n\r\n.signin-hero {\r\n    height: 100vh;\r\n    background: #ebf7ff url(../img/admin-signin.svg) center center no-repeat;\r\n    background-size: 60%;\r\n}\r\n\r\n.sign-wrapper {\r\n    height: 100vh;\r\n    margin: 0 auto;\r\n}\r\n\r\n@media only screen and (max-width:1024px) and (orientation: portrait) {\r\n  .signin-hero {\r\n    height: 50vh;\r\n    background-size: 60%;\r\n  }\r\n\r\n  .sign-wrapper {\r\n    height: auto;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    padding: 2em;\r\n  }\r\n}\r\n\r\n.content-auth {\r\n  min-height: calc(100vh - #{$height-header + $height-footer});\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  > .container {\r\n    padding: 0;\r\n\r\n    @media (max-width: 1139px) {\r\n      max-width: none;\r\n      padding: 0 20px;\r\n    }\r\n\r\n    &:first-child { flex: 1; }\r\n  }\r\n}\r\n\r\n.content-auth-alt {\r\n  min-height: calc(100vh - #{$height-header + $height-footer});\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  .container {\r\n   padding: 0;\r\n\r\n   @media (max-width: 1139px) {\r\n     max-width: none;\r\n   }\r\n }\r\n}\r\n\r\n.sign-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 440px;\r\n\r\n  @include media-breakpoint-up(xl) {\r\n    width: 440px;\r\n  }\r\n\r\n  .form-group {\r\n    label {\r\n      display: block;\r\n      margin-bottom: 5px;\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}